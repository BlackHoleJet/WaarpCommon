<?xml version="1.0" encoding="UTF-8"?>
<pmd-cpd>
<duplication lines="56" tokens="287">
<file line="218" path="J:\Git\github\waarp-digest\WaarpCommon\src\main\java\org\waarp\common\database\model\DbModelMysql.java"/>
<file line="150" path="J:\Git\github\waarp-digest\WaarpCommon\src\main\java\org\waarp\common\database\model\DbModelPostgresql.java"/>
<codefragment>
<![CDATA[
		String primaryKey = " PRIMARY KEY ";
		String notNull = " NOT NULL ";

		// Example
		String action = createTableH2 + DbDataModel.table + "(";
		DbDataModel.Columns[] ccolumns = DbDataModel.Columns
				.values();
		for (int i = 0; i < ccolumns.length - 1; i++) {
			action += ccolumns[i].name() +
					DBType.getType(DbDataModel.dbTypes[i]) + notNull +
					", ";
		}
		action += ccolumns[ccolumns.length - 1].name() +
				DBType.getType(DbDataModel.dbTypes[ccolumns.length - 1]) +
				primaryKey + ")";
		logger.warn(action);
		DbRequest request = new DbRequest(session);
		try {
			request.query(action);
		} catch (WaarpDatabaseNoConnectionException e) {
			logger.warn("CreateTables Error", e);
			return;
		} catch (WaarpDatabaseSqlException e) {
			logger.warn("CreateTables Error", e);
			return;
		} finally {
			request.close();
		}
		// Index Example
		action = "CREATE INDEX IDX_RUNNER ON " + DbDataModel.table + "(";
		DbDataModel.Columns[] icolumns = DbDataModel.indexes;
		for (int i = 0; i < icolumns.length - 1; i++) {
			action += icolumns[i].name() + ", ";
		}
		action += icolumns[icolumns.length - 1].name() + ")";
		logger.warn(action);
		try {
			request.query(action);
		} catch (WaarpDatabaseNoConnectionException e) {
			logger.warn("CreateTables Error", e);
			return;
		} catch (WaarpDatabaseSqlException e) {
			return;
		} finally {
			request.close();
		}

		// example sequence
		/*
		 * # Table to handle any number of sequences: CREATE TABLE Sequences ( name VARCHAR(22) NOT
		 * NULL, seq INT UNSIGNED NOT NULL, # (or BIGINT) PRIMARY KEY name ); # Create a Sequence:
		 * INSERT INTO Sequences (name, seq) VALUES (?, 0); # Drop a Sequence: DELETE FROM Sequences
		 * WHERE name = ?; # Get a sequence number: UPDATE Sequences SET seq = LAST_INSERT_ID(seq +
		 * 1) WHERE name = ?; $seq = $db->LastInsertId();
		 */
		action = "CREATE TABLE Sequences (name VARCHAR(22) NOT NULL PRIMARY KEY," +
]]>
</codefragment>
</duplication>
<duplication lines="65" tokens="250">
<file line="359" path="J:\Git\github\waarp-digest\WaarpCommon\src\main\java\org\waarp\common\file\filesystembased\FilesystemBasedFileImpl.java"/>
<file line="302" path="J:\Git\github\waarp-digest\WaarpCommon\src\main\java\org\waarp\common\file\passthrough\PassthroughBasedFileImpl.java"/>
<codefragment>
<![CDATA[
			long newposition = ((FilesystemBasedRestartImpl) restart)
					.getPosition();
			try {
				setPosition(newposition);
			} catch (IOException e) {
				throw new Reply502Exception("Cannot set the marker position");
			}
			return true;
		} catch (NoRestartException e) {
		}
		return false;
	}

	public boolean retrieve() throws CommandAbstractException {
		checkIdentify();
		if (isReady) {
			restartMarker(getSession().getRestart());
			return canRead();
		}
		return false;
	}

	public boolean store() throws CommandAbstractException {
		checkIdentify();
		if (isReady) {
			restartMarker(getSession().getRestart());
			return canWrite();
		}
		return false;
	}

	public DataBlock readDataBlock() throws FileTransferException,
			FileEndOfTransferException {
		if (isReady) {
			DataBlock dataBlock = new DataBlock();
			ChannelBuffer buffer = null;
			buffer = getBlock(getSession().getBlockSize());
			if (buffer != null) {
				dataBlock.setBlock(buffer);
				if (dataBlock.getByteCount() < getSession().getBlockSize()) {
					dataBlock.setEOF(true);
				}
				return dataBlock;
			}
		}
		throw new FileTransferException("No file is ready");
	}

	public void writeDataBlock(DataBlock dataBlock)
			throws FileTransferException {
		if (isReady) {
			if (dataBlock.isEOF()) {
				writeBlockEnd(dataBlock.getBlock());
				return;
			}
			writeBlock(dataBlock.getBlock());
			return;
		}
		throw new FileTransferException("No file is ready");
	}

	/**
	 * Valid Position of this file
	 */
	private long position = 0;
]]>
</codefragment>
</duplication>
<duplication lines="47" tokens="241">
<file line="62" path="J:\Git\github\waarp-digest\WaarpCommon\src\main\java\org\waarp\common\crypto\DynamicKeyManager.java"/>
<file line="54" path="J:\Git\github\waarp-digest\WaarpCommon\src\main\java\org\waarp\common\crypto\KeyManager.java"/>
<codefragment>
<![CDATA[
	public List<String> initFromList(List<String> keys, String extension) {
		LinkedList<String> wrong = new LinkedList<String>();
		for (String filename : keys) {
			File file = new File(filename);
			if (file.canRead()) {
				String basename = file.getName();
				int lastpos = basename.lastIndexOf(extension);
				if (lastpos <= 0) {
					wrong.add(filename);
					continue;
				}
				String firstname = basename.substring(0, lastpos - 1);
				int len = (int) file.length();
				byte[] key = new byte[len];
				FileInputStream inputStream = null;
				try {
					inputStream = new FileInputStream(file);
				} catch (FileNotFoundException e) {
					// should not be
					wrong.add(filename);
					continue;
				}
				int read = 0;
				int offset = 0;
				while (read > 0) {
					try {
						read = inputStream.read(key, offset, len);
					} catch (IOException e) {
						wrong.add(filename);
						read = -2;
						break;
					}
					offset += read;
					if (offset < len) {
						len -= read;
					} else {
						break;
					}
				}
				try {
					inputStream.close();
				} catch (IOException e) {
				}
				if (read < -1) {
					// wrong
					continue;
				}
]]>
</codefragment>
</duplication>
<duplication lines="51" tokens="199">
<file line="181" path="J:\Git\github\waarp-digest\WaarpCommon\src\main\java\org\waarp\common\database\model\DbModelOracle.java"/>
<file line="100" path="J:\Git\github\waarp-digest\WaarpCommon\src\main\java\org\waarp\common\database\model\DbModelPostgresql.java"/>
<codefragment>
<![CDATA[
		VARBINARY(Types.VARBINARY, " BLOB "),
		DATE(Types.DATE, " DATE "),
		TIMESTAMP(Types.TIMESTAMP, " TIMESTAMP ");

		public int type;

		public String constructor;

		private DBType(int type, String constructor) {
			this.type = type;
			this.constructor = constructor;
		}

		public static String getType(int sqltype) {
			switch (sqltype) {
				case Types.CHAR:
					return CHAR.constructor;
				case Types.VARCHAR:
					return VARCHAR.constructor;
				case Types.LONGVARCHAR:
					return LONGVARCHAR.constructor;
				case Types.BIT:
					return BIT.constructor;
				case Types.TINYINT:
					return TINYINT.constructor;
				case Types.SMALLINT:
					return SMALLINT.constructor;
				case Types.INTEGER:
					return INTEGER.constructor;
				case Types.BIGINT:
					return BIGINT.constructor;
				case Types.REAL:
					return REAL.constructor;
				case Types.DOUBLE:
					return DOUBLE.constructor;
				case Types.VARBINARY:
					return VARBINARY.constructor;
				case Types.DATE:
					return DATE.constructor;
				case Types.TIMESTAMP:
					return TIMESTAMP.constructor;
				default:
					return null;
			}
		}
	}

	public void createTables(DbSession session) throws WaarpDatabaseNoConnectionException {
		// Create tables: configuration, hosts, rules, runner, cptrunner
		String createTableH2 = "CREATE TABLE ";
		String constraint = " CONSTRAINT ";
]]>
</codefragment>
</duplication>
<duplication lines="47" tokens="193">
<file line="165" path="J:\Git\github\waarp-digest\WaarpCommon\src\main\java\org\waarp\common\database\model\DbModelMysql.java"/>
<file line="180" path="J:\Git\github\waarp-digest\WaarpCommon\src\main\java\org\waarp\common\database\model\DbModelOracle.java"/>
<codefragment>
<![CDATA[
		DOUBLE(Types.DOUBLE, " DOUBLE "),
		VARBINARY(Types.VARBINARY, " BLOB "),
		DATE(Types.DATE, " DATE "),
		TIMESTAMP(Types.TIMESTAMP, " TIMESTAMP ");

		public int type;

		public String constructor;

		private DBType(int type, String constructor) {
			this.type = type;
			this.constructor = constructor;
		}

		public static String getType(int sqltype) {
			switch (sqltype) {
				case Types.CHAR:
					return CHAR.constructor;
				case Types.VARCHAR:
					return VARCHAR.constructor;
				case Types.LONGVARCHAR:
					return LONGVARCHAR.constructor;
				case Types.BIT:
					return BIT.constructor;
				case Types.TINYINT:
					return TINYINT.constructor;
				case Types.SMALLINT:
					return SMALLINT.constructor;
				case Types.INTEGER:
					return INTEGER.constructor;
				case Types.BIGINT:
					return BIGINT.constructor;
				case Types.REAL:
					return REAL.constructor;
				case Types.DOUBLE:
					return DOUBLE.constructor;
				case Types.VARBINARY:
					return VARBINARY.constructor;
				case Types.DATE:
					return DATE.constructor;
				case Types.TIMESTAMP:
					return TIMESTAMP.constructor;
				default:
					return null;
			}
		}
	}
]]>
</codefragment>
</duplication>
<duplication lines="34" tokens="189">
<file line="183" path="J:\Git\github\waarp-digest\WaarpCommon\src\main\java\org\waarp\common\database\model\DbModelH2.java"/>
<file line="215" path="J:\Git\github\waarp-digest\WaarpCommon\src\main\java\org\waarp\common\database\model\DbModelMysql.java"/>
<codefragment>
<![CDATA[
	public void createTables(DbSession session) throws WaarpDatabaseNoConnectionException {
		// Create tables: configuration, hosts, rules, runner, cptrunner
		String createTableH2 = "CREATE TABLE IF NOT EXISTS ";
		String primaryKey = " PRIMARY KEY ";
		String notNull = " NOT NULL ";

		// Example
		String action = createTableH2 + DbDataModel.table + "(";
		DbDataModel.Columns[] ccolumns = DbDataModel.Columns
				.values();
		for (int i = 0; i < ccolumns.length - 1; i++) {
			action += ccolumns[i].name() +
					DBType.getType(DbDataModel.dbTypes[i]) + notNull +
					", ";
		}
		action += ccolumns[ccolumns.length - 1].name() +
				DBType.getType(DbDataModel.dbTypes[ccolumns.length - 1]) +
				primaryKey + ")";
		logger.warn(action);
		DbRequest request = new DbRequest(session);
		try {
			request.query(action);
		} catch (WaarpDatabaseNoConnectionException e) {
			logger.warn("CreateTables Error", e);
			return;
		} catch (WaarpDatabaseSqlException e) {
			logger.warn("CreateTables Error", e);
			return;
		} finally {
			request.close();
		}

		// Index example
		action = "CREATE INDEX IF NOT EXISTS IDX_RUNNER ON " + DbDataModel.table + "(";
]]>
</codefragment>
</duplication>
<duplication lines="46" tokens="184">
<file line="166" path="J:\Git\github\waarp-digest\WaarpCommon\src\main\java\org\waarp\common\database\model\DbModelMysql.java"/>
<file line="100" path="J:\Git\github\waarp-digest\WaarpCommon\src\main\java\org\waarp\common\database\model\DbModelPostgresql.java"/>
<codefragment>
<![CDATA[
		VARBINARY(Types.VARBINARY, " BLOB "),
		DATE(Types.DATE, " DATE "),
		TIMESTAMP(Types.TIMESTAMP, " TIMESTAMP ");

		public int type;

		public String constructor;

		private DBType(int type, String constructor) {
			this.type = type;
			this.constructor = constructor;
		}

		public static String getType(int sqltype) {
			switch (sqltype) {
				case Types.CHAR:
					return CHAR.constructor;
				case Types.VARCHAR:
					return VARCHAR.constructor;
				case Types.LONGVARCHAR:
					return LONGVARCHAR.constructor;
				case Types.BIT:
					return BIT.constructor;
				case Types.TINYINT:
					return TINYINT.constructor;
				case Types.SMALLINT:
					return SMALLINT.constructor;
				case Types.INTEGER:
					return INTEGER.constructor;
				case Types.BIGINT:
					return BIGINT.constructor;
				case Types.REAL:
					return REAL.constructor;
				case Types.DOUBLE:
					return DOUBLE.constructor;
				case Types.VARBINARY:
					return VARBINARY.constructor;
				case Types.DATE:
					return DATE.constructor;
				case Types.TIMESTAMP:
					return TIMESTAMP.constructor;
				default:
					return null;
			}
		}
	}
]]>
</codefragment>
</duplication>
<duplication lines="31" tokens="175">
<file line="186" path="J:\Git\github\waarp-digest\WaarpCommon\src\main\java\org\waarp\common\database\model\DbModelH2.java"/>
<file line="150" path="J:\Git\github\waarp-digest\WaarpCommon\src\main\java\org\waarp\common\database\model\DbModelPostgresql.java"/>
<codefragment>
<![CDATA[
		String primaryKey = " PRIMARY KEY ";
		String notNull = " NOT NULL ";

		// Example
		String action = createTableH2 + DbDataModel.table + "(";
		DbDataModel.Columns[] ccolumns = DbDataModel.Columns
				.values();
		for (int i = 0; i < ccolumns.length - 1; i++) {
			action += ccolumns[i].name() +
					DBType.getType(DbDataModel.dbTypes[i]) + notNull +
					", ";
		}
		action += ccolumns[ccolumns.length - 1].name() +
				DBType.getType(DbDataModel.dbTypes[ccolumns.length - 1]) +
				primaryKey + ")";
		logger.warn(action);
		DbRequest request = new DbRequest(session);
		try {
			request.query(action);
		} catch (WaarpDatabaseNoConnectionException e) {
			logger.warn("CreateTables Error", e);
			return;
		} catch (WaarpDatabaseSqlException e) {
			logger.warn("CreateTables Error", e);
			return;
		} finally {
			request.close();
		}

		// Index example
		action = "CREATE INDEX IF NOT EXISTS IDX_RUNNER ON " + DbDataModel.table + "(";
]]>
</codefragment>
</duplication>
<duplication lines="45" tokens="163">
<file line="262" path="J:\Git\github\waarp-digest\WaarpCommon\src\main\java\org\waarp\common\database\model\DbModelH2.java"/>
<file line="225" path="J:\Git\github\waarp-digest\WaarpCommon\src\main\java\org\waarp\common\database\model\DbModelPostgresql.java"/>
<codefragment>
<![CDATA[
			logger.warn("ResetSequences Error", e);
			return;
		} finally {
			request.close();
		}
		logger.warn(action);
	}

	public long nextSequence(DbSession dbSession)
			throws WaarpDatabaseNoConnectionException,
			WaarpDatabaseSqlException, WaarpDatabaseNoDataException {
		long result = DbConstant.ILLEGALVALUE;
		String action = "SELECT NEXTVAL('" + DbDataModel.fieldseq + "')";
		DbPreparedStatement preparedStatement = new DbPreparedStatement(
				dbSession);
		try {
			preparedStatement.createPrepareStatement(action);
			// Limit the search
			preparedStatement.executeQuery();
			if (preparedStatement.getNext()) {
				try {
					result = preparedStatement.getResultSet().getLong(1);
				} catch (SQLException e) {
					throw new WaarpDatabaseSqlException(e);
				}
				return result;
			} else {
				throw new WaarpDatabaseNoDataException(
						"No sequence found. Must be initialized first");
			}
		} finally {
			preparedStatement.realClose();
		}
	}

	@Override
	public String validConnectionString() {
		return "select 1";
	}

	public String limitRequest(String allfields, String request, int nb) {
		return request + " LIMIT " + nb;
	}

}
]]>
</codefragment>
</duplication>
<duplication lines="39" tokens="159">
<file line="134" path="J:\Git\github\waarp-digest\WaarpCommon\src\main\java\org\waarp\common\database\model\DbModelH2.java"/>
<file line="168" path="J:\Git\github\waarp-digest\WaarpCommon\src\main\java\org\waarp\common\database\model\DbModelMysql.java"/>
<file line="183" path="J:\Git\github\waarp-digest\WaarpCommon\src\main\java\org\waarp\common\database\model\DbModelOracle.java"/>
<file line="102" path="J:\Git\github\waarp-digest\WaarpCommon\src\main\java\org\waarp\common\database\model\DbModelPostgresql.java"/>
<codefragment>
<![CDATA[
		BLOB(Types.BLOB, " BLOB ");

		public int type;

		public String constructor;

		private DBType(int type, String constructor) {
			this.type = type;
			this.constructor = constructor;
		}

		public static String getType(int sqltype) {
			switch (sqltype) {
				case Types.CHAR:
					return CHAR.constructor;
				case Types.VARCHAR:
					return VARCHAR.constructor;
				case Types.LONGVARCHAR:
					return LONGVARCHAR.constructor;
				case Types.BIT:
					return BIT.constructor;
				case Types.TINYINT:
					return TINYINT.constructor;
				case Types.SMALLINT:
					return SMALLINT.constructor;
				case Types.INTEGER:
					return INTEGER.constructor;
				case Types.BIGINT:
					return BIGINT.constructor;
				case Types.REAL:
					return REAL.constructor;
				case Types.DOUBLE:
					return DOUBLE.constructor;
				case Types.VARBINARY:
					return VARBINARY.constructor;
				case Types.DATE:
					return DATE.constructor;
				case Types.TIMESTAMP:
					return TIMESTAMP.constructor;
]]>
</codefragment>
</duplication>
<duplication lines="26" tokens="139">
<file line="257" path="J:\Git\github\waarp-digest\WaarpCommon\src\main\java\org\waarp\common\database\model\DbModelOracle.java"/>
<file line="174" path="J:\Git\github\waarp-digest\WaarpCommon\src\main\java\org\waarp\common\database\model\DbModelPostgresql.java"/>
<codefragment>
<![CDATA[
			return;
		} finally {
			request.close();
		}
		// Index example
		action = "CREATE INDEX IDX_RUNNER ON " + DbDataModel.table + "(";
		DbDataModel.Columns[] icolumns = DbDataModel.indexes;
		for (int i = 0; i < icolumns.length - 1; i++) {
			action += icolumns[i].name() + ", ";
		}
		action += icolumns[icolumns.length - 1].name() + ")";
		logger.warn(action);
		try {
			request.query(action);
		} catch (WaarpDatabaseNoConnectionException e) {
			logger.warn("CreateTables Error", e);
			return;
		} catch (WaarpDatabaseSqlException e) {
			return;
		} finally {
			request.close();
		}

		// example sequence
		action = "CREATE SEQUENCE " + DbDataModel.fieldseq +
				" MINVALUE " + (DbConstant.ILLEGALVALUE + 1) +
]]>
</codefragment>
</duplication>
<duplication lines="39" tokens="137">
<file line="134" path="J:\Git\github\waarp-digest\WaarpCommon\src\main\java\org\waarp\common\tar\TarUtility.java"/>
<file line="183" path="J:\Git\github\waarp-digest\WaarpCommon\src\main\java\org\waarp\common\tar\TarUtility.java"/>
<codefragment>
<![CDATA[
	public static boolean createTarFromFiles(List<File> files, String filename) {
		File saveFile = new File(filename);
		// recursive call
		TarArchiveOutputStream taos;
		try {
			taos = new TarArchiveOutputStream(new FileOutputStream(saveFile));
		} catch (FileNotFoundException e) {
			return false;
		}
		taos.setLongFileMode(TarArchiveOutputStream.LONGFILE_GNU);
		for (File file : files) {
			try {
				addFile(file, taos);
			} catch (IOException e) {
				try {
					taos.close();
				} catch (IOException e1) {
					// ignore
				}
				return false;
			}
		}
		try {
			taos.finish();
		} catch (IOException e1) {
			// ignore
		}
		try {
			taos.flush();
		} catch (IOException e) {
			// ignore
		}
		try {
			taos.close();
		} catch (IOException e) {
			// ignore
		}
		return true;
	}
]]>
</codefragment>
</duplication>
<duplication lines="37" tokens="129">
<file line="132" path="J:\Git\github\waarp-digest\WaarpCommon\src\main\java\org\waarp\common\tar\ZipUtility.java"/>
<file line="179" path="J:\Git\github\waarp-digest\WaarpCommon\src\main\java\org\waarp\common\tar\ZipUtility.java"/>
<codefragment>
<![CDATA[
	public static boolean createZipFromFiles(List<File> files, String filename) {
		File saveFile = new File(filename);
		ZipArchiveOutputStream zaos;
		try {
			zaos = new ZipArchiveOutputStream(new FileOutputStream(saveFile));
		} catch (FileNotFoundException e) {
			return false;
		}
		for (File file : files) {
			try {
				addFile(file, zaos);
			} catch (IOException e) {
				try {
					zaos.close();
				} catch (IOException e1) {
					// ignore
				}
				return false;
			}
		}
		try {
			zaos.finish();
		} catch (IOException e1) {
			// ignore
		}
		try {
			zaos.flush();
		} catch (IOException e) {
			// ignore
		}
		try {
			zaos.close();
		} catch (IOException e) {
			// ignore
		}
		return true;
	}
]]>
</codefragment>
</duplication>
<duplication lines="32" tokens="124">
<file line="242" path="J:\Git\github\waarp-digest\WaarpCommon\src\main\java\org\waarp\common\database\model\DbModelMysql.java"/>
<file line="257" path="J:\Git\github\waarp-digest\WaarpCommon\src\main\java\org\waarp\common\database\model\DbModelOracle.java"/>
<codefragment>
<![CDATA[
			return;
		} finally {
			request.close();
		}
		// Index Example
		action = "CREATE INDEX IDX_RUNNER ON " + DbDataModel.table + "(";
		DbDataModel.Columns[] icolumns = DbDataModel.indexes;
		for (int i = 0; i < icolumns.length - 1; i++) {
			action += icolumns[i].name() + ", ";
		}
		action += icolumns[icolumns.length - 1].name() + ")";
		logger.warn(action);
		try {
			request.query(action);
		} catch (WaarpDatabaseNoConnectionException e) {
			logger.warn("CreateTables Error", e);
			return;
		} catch (WaarpDatabaseSqlException e) {
			return;
		} finally {
			request.close();
		}

		// example sequence
		/*
		 * # Table to handle any number of sequences: CREATE TABLE Sequences ( name VARCHAR(22) NOT
		 * NULL, seq INT UNSIGNED NOT NULL, # (or BIGINT) PRIMARY KEY name ); # Create a Sequence:
		 * INSERT INTO Sequences (name, seq) VALUES (?, 0); # Drop a Sequence: DELETE FROM Sequences
		 * WHERE name = ?; # Get a sequence number: UPDATE Sequences SET seq = LAST_INSERT_ID(seq +
		 * 1) WHERE name = ?; $seq = $db->LastInsertId();
		 */
		action = "CREATE TABLE Sequences (name VARCHAR(22) NOT NULL PRIMARY KEY," +
]]>
</codefragment>
</duplication>
<duplication lines="44" tokens="122">
<file line="141" path="J:\Git\github\waarp-digest\WaarpCommon\src\main\java\org\waarp\common\file\filesystembased\FilesystemBasedFileImpl.java"/>
<file line="134" path="J:\Git\github\waarp-digest\WaarpCommon\src\main\java\org\waarp\common\file\passthrough\PassthroughBasedFileImpl.java"/>
<codefragment>
<![CDATA[
	}

	public void clear() throws CommandAbstractException {
		closeFile();
		isReady = false;
		currentFile = null;
		isAppend = false;
	}

	public void checkIdentify() throws Reply530Exception {
		if (!getSession().getAuth().isIdentified()) {
			throw new Reply530Exception("User not authentified");
		}
	}

	public SessionInterface getSession() {
		return session;
	}

	public DirInterface getDir() {
		return dir;
	}

	/**
	 * Get the File from this path, checking first its validity
	 * 
	 * @param path
	 * @return the FileInterface
	 * @throws CommandAbstractException
	 */
	protected File getFileFromPath(String path) throws CommandAbstractException {
		String newdir = getDir().validatePath(path);
		String truedir = auth.getAbsolutePath(newdir);
		return new File(truedir);
	}

	/**
	 * Get the relative path (without mount point)
	 * 
	 * @param file
	 * @return the relative path
	 */
	protected String getRelativePath(File file) {
		return auth.getRelativePath(FilesystemBasedDirImpl.normalizePath(file
]]>
</codefragment>
</duplication>
<duplication lines="24" tokens="116">
<file line="236" path="J:\Git\github\waarp-digest\WaarpCommon\src\main\java\org\waarp\common\database\model\DbModelH2.java"/>
<file line="199" path="J:\Git\github\waarp-digest\WaarpCommon\src\main\java\org\waarp\common\database\model\DbModelPostgresql.java"/>
<codefragment>
<![CDATA[
				" START WITH " + (DbConstant.ILLEGALVALUE + 1);
		logger.warn(action);
		try {
			request.query(action);
		} catch (WaarpDatabaseNoConnectionException e) {
			logger.warn("CreateTables Error", e);
			return;
		} catch (WaarpDatabaseSqlException e) {
			logger.warn("CreateTables Error", e);
			return;
		} finally {
			request.close();
		}
	}

	public void resetSequence(DbSession session, long newvalue)
			throws WaarpDatabaseNoConnectionException {
		String action = "ALTER SEQUENCE " + DbDataModel.fieldseq +
				" RESTART WITH " + newvalue;
		DbRequest request = new DbRequest(session);
		try {
			request.query(action);
		} catch (WaarpDatabaseNoConnectionException e) {
			logger.warn("ResetSequences Error", e);
]]>
</codefragment>
</duplication>
<duplication lines="20" tokens="111">
<file line="216" path="J:\Git\github\waarp-digest\WaarpCommon\src\main\java\org\waarp\common\database\model\DbModelH2.java"/>
<file line="247" path="J:\Git\github\waarp-digest\WaarpCommon\src\main\java\org\waarp\common\database\model\DbModelMysql.java"/>
<file line="262" path="J:\Git\github\waarp-digest\WaarpCommon\src\main\java\org\waarp\common\database\model\DbModelOracle.java"/>
<file line="179" path="J:\Git\github\waarp-digest\WaarpCommon\src\main\java\org\waarp\common\database\model\DbModelPostgresql.java"/>
<codefragment>
<![CDATA[
		action = "CREATE INDEX IF NOT EXISTS IDX_RUNNER ON " + DbDataModel.table + "(";
		DbDataModel.Columns[] icolumns = DbDataModel.indexes;
		for (int i = 0; i < icolumns.length - 1; i++) {
			action += icolumns[i].name() + ", ";
		}
		action += icolumns[icolumns.length - 1].name() + ")";
		logger.warn(action);
		try {
			request.query(action);
		} catch (WaarpDatabaseNoConnectionException e) {
			logger.warn("CreateTables Error", e);
			return;
		} catch (WaarpDatabaseSqlException e) {
			return;
		} finally {
			request.close();
		}

		// example sequence
		action = "CREATE SEQUENCE IF NOT EXISTS " + DbDataModel.fieldseq +
]]>
</codefragment>
</duplication>
<duplication lines="16" tokens="111">
<file line="250" path="J:\Git\github\waarp-digest\WaarpCommon\src\main\java\org\waarp\common\file\filesystembased\FilesystemBasedDirImpl.java"/>
<file line="163" path="J:\Git\github\waarp-digest\WaarpCommon\src\main\java\org\waarp\common\file\passthrough\PassthroughBasedDirImpl.java"/>
<codefragment>
<![CDATA[
		return ((FilesystemBasedAuthImpl) getSession().getAuth())
				.getRelativePath(normalizePath(file.getAbsolutePath()));
	}

	public boolean changeDirectory(String path) throws CommandAbstractException {
		checkIdentify();
		String newpath = consolidatePath(path);
		List<String> paths = wildcardFiles(newpath);
		if (paths.size() != 1) {
			logger.warn("CD error: {}", newpath);
			throw new Reply550Exception("Directory not found: " + paths.size() +
					" founds");
		}
		String extDir = paths.get(0);
		extDir = this.validatePath(extDir);
		if (isDirectory(extDir)) {
]]>
</codefragment>
</duplication>
<duplication lines="14" tokens="107">
<file line="186" path="J:\Git\github\waarp-digest\WaarpCommon\src\main\java\org\waarp\common\database\model\DbModelH2.java"/>
<file line="218" path="J:\Git\github\waarp-digest\WaarpCommon\src\main\java\org\waarp\common\database\model\DbModelMysql.java"/>
<file line="232" path="J:\Git\github\waarp-digest\WaarpCommon\src\main\java\org\waarp\common\database\model\DbModelOracle.java"/>
<file line="150" path="J:\Git\github\waarp-digest\WaarpCommon\src\main\java\org\waarp\common\database\model\DbModelPostgresql.java"/>
<codefragment>
<![CDATA[
		String primaryKey = " PRIMARY KEY ";
		String notNull = " NOT NULL ";

		// Example
		String action = createTableH2 + DbDataModel.table + "(";
		DbDataModel.Columns[] ccolumns = DbDataModel.Columns
				.values();
		for (int i = 0; i < ccolumns.length - 1; i++) {
			action += ccolumns[i].name() +
					DBType.getType(DbDataModel.dbTypes[i]) + notNull +
					", ";
		}
		action += ccolumns[ccolumns.length - 1].name() +
				DBType.getType(DbDataModel.dbTypes[ccolumns.length - 1]) +
]]>
</codefragment>
</duplication>
<duplication lines="14" tokens="105">
<file line="285" path="J:\Git\github\waarp-digest\WaarpCommon\src\main\java\org\waarp\common\file\filesystembased\FilesystemBasedDirImpl.java"/>
<file line="188" path="J:\Git\github\waarp-digest\WaarpCommon\src\main\java\org\waarp\common\file\passthrough\PassthroughBasedDirImpl.java"/>
<codefragment>
<![CDATA[
	}

	public String mkdir(String directory) throws CommandAbstractException {
		checkIdentify();
		String newdirectory = consolidatePath(directory);
		File dir = new File(newdirectory);
		String parent = dir.getParentFile().getPath();
		List<String> paths = wildcardFiles(normalizePath(parent));
		if (paths.size() != 1) {
			throw new Reply550Exception("Base Directory not found: " +
					paths.size() + " founds");
		}
		String newDir = paths.get(0) + SEPARATOR + dir.getName();
		newDir = this.validatePath(newDir);
]]>
</codefragment>
</duplication>
<duplication lines="23" tokens="104">
<file line="214" path="J:\Git\github\waarp-digest\WaarpCommon\src\main\java\org\waarp\common\file\filesystembased\FilesystemBasedDirImpl.java"/>
<file line="130" path="J:\Git\github\waarp-digest\WaarpCommon\src\main\java\org\waarp\common\file\passthrough\PassthroughBasedDirImpl.java"/>
<codefragment>
<![CDATA[
		String truedir = ((FilesystemBasedAuthImpl) getSession().getAuth())
				.getAbsolutePath(newdir);
		return new File(truedir);
	}

	/**
	 * Get the true file from the path
	 * 
	 * @param path
	 * @return the true File from the path
	 * @throws CommandAbstractException
	 */
	protected File getTrueFile(String path) throws CommandAbstractException {
		checkIdentify();
		String newpath = consolidatePath(path);
		List<String> paths = wildcardFiles(normalizePath(newpath));
		if (paths.size() != 1) {
			throw new Reply550Exception("File not found: " + paths.size() +
					" founds");
		}
		String extDir = paths.get(0);
		extDir = this.validatePath(extDir);
		File file = getFileFromPath(extDir);
]]>
</codefragment>
</duplication>
<duplication lines="31" tokens="103">
<file line="217" path="J:\Git\github\waarp-digest\WaarpCommon\src\main\java\org\waarp\common\database\data\AbstractDbData.java"/>
<file line="84" path="J:\Git\github\waarp-digest\WaarpCommon\src\main\java\org\waarp\common\database\data\AbstractDbDataWithCommit.java"/>
<codefragment>
<![CDATA[
			isSaved = true;
		} finally {
			preparedStatement.realClose();
		}
	}

	/**
	 * Update object to table
	 * 
	 * @throws WaarpDatabaseException
	 */
	public void update() throws WaarpDatabaseException {
		if (isSaved) {
			return;
		}
		if (dbSession == null) {
			isSaved = true;
			return;
		}
		setToArray();
		DbPreparedStatement preparedStatement = new DbPreparedStatement(
				dbSession);
		try {
			preparedStatement.createPrepareStatement("UPDATE " + getTable() +
					" SET " + getUpdateAllFields() + " WHERE " +
					getWherePrimaryKey());
			setValues(preparedStatement, allFields);
			int count = preparedStatement.executeUpdate();
			if (count <= 0) {
				throw new WaarpDatabaseNoDataException("No row found");
			}
]]>
</codefragment>
</duplication>
<duplication lines="14" tokens="101">
<file line="280" path="J:\Git\github\waarp-digest\WaarpCommon\src\main\java\org\waarp\common\tar\TarUtility.java"/>
<file line="274" path="J:\Git\github\waarp-digest\WaarpCommon\src\main\java\org\waarp\common\tar\ZipUtility.java"/>
<codefragment>
<![CDATA[
					"   option=3 means tar and source is a list of files comma separated");
			System.exit(1);
		}
		int option = Integer.parseInt(args[0]);
		String tarfile = args[1];
		String tarsource = args[2];
		String[] tarfiles = null;
		if (option == 3) {
			tarfiles = args[2].split(",");
			File[] files = new File[tarfiles.length];
			for (int i = 0; i < tarfiles.length; i++) {
				files[i] = new File(tarfiles[i]);
			}
			if (createTarFromFiles(files, tarfile)) {
]]>
</codefragment>
</duplication>
</pmd-cpd>